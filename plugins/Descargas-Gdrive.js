import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';

export default {
  command: ['gdrive', 'drive'],
  help: ['*‚íº·¥Ö Ä…™·¥†·¥á < ü…™…¥·¥ã>*'],
  tags: ['*ùîªùîºùïä‚ÑÇùî∏‚Ñùùîæùî∏ùïä*'],

  run: async (m, { text, conn, chatId, prefix, command }) => {
    if (!text) 
      return m.tutorial(`*[ ‚ùó ] …™…¥…¢ Ä·¥ás·¥Ä ·¥ú…¥ ·¥á…¥ ü·¥Ä·¥Ñ·¥á ·¥†·¥ÄÃÅ ü…™·¥Ö·¥è ·¥Ö·¥á …¢·¥è·¥è…¢ ü·¥á ·¥Ö Ä…™·¥†·¥á.* (·¥á·¥ä: *${prefix + command}* _https://gdrive.com/  è ·¥áx·¥õ·¥á…¥s…™·¥èÃÅ…¥_)`);

    const [url, ext] = text.split(' ');
    if (!url || !ext) 
      return m.reply('*[ ‚ùó ] ·¥õ·¥á…¥·¥áÃÅs œô·¥ú·¥á ·¥ò·¥è…¥·¥á Ä ·¥á ü  ü…™…¥·¥ã  è  ü·¥Ä ·¥áx·¥õ·¥á…¥s…™·¥èÃÅ…¥ (·¥á·¥ä: ·¥ç·¥ò4, ·¥ç·¥ò3, ·¥Ä·¥ò·¥ã, ·¥á·¥õ·¥Ñ).*');

    const outputDir = './lib/gdrive';
    if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);

    const fileName = `gdrive_${Date.now()}.${ext}`;
    const filePath = path.join(outputDir, fileName);

    await m.reply('*[ ‚è≥ ] ·¥Ö·¥ás·¥Ñ·¥Ä Ä…¢·¥Ä·¥Ö·¥è ·¥õ·¥ú ·¥Ä Ä·¥Ñ ú…™·¥†·¥è, ·¥ás·¥ò·¥á Ä·¥Ä ·¥ú…¥ ·¥ç·¥è·¥ç·¥á…¥·¥õ·¥è...*');

    const gdown = spawn('gdown', ['--fuzzy', '-O', filePath, url]);

    gdown.stderr.on('data', (data) => {
      console.error(`Error: ${data.toString().trim()}`);
    });

    gdown.on('close', async (code) => {
      if (code !== 0) return m.reply('*[ ‚ùó ] ·¥ú·¥òs,  ú·¥ú ô·¥è ·¥ú…¥ ·¥á Ä Ä·¥è Ä ·¥Ö·¥ás·¥Ñ·¥Ä Ä…¢·¥Ä·¥Ö·¥è ·¥á ü ·¥Ä Ä·¥Ñ ú…™·¥†·¥è.*');

      if (!fs.existsSync(filePath)) 
        return m.reply('*[ üîç ] …¥·¥è ·¥ò·¥ú·¥Ö·¥á ·¥á…¥·¥Ñ·¥è…¥·¥õ Ä·¥Ä Ä ·¥á ü ·¥Ä Ä·¥Ñ ú…™·¥†·¥è œô·¥ú·¥á ·¥Ö·¥ás·¥Ñ·¥Ä Ä…¢·¥ú·¥áÃÅ.*');

      const stat = fs.statSync(filePath);
      if (stat.size === 0) {
        fs.unlinkSync(filePath);
        return m.reply('*[ ‚ö†Ô∏è ] ·¥á ü ·¥Ä Ä·¥Ñ ú…™·¥†·¥è œô·¥ú·¥á  ô·¥Ä·¥ä·¥áÃÅ ·¥ás·¥õ·¥ÄÃÅ ·¥†·¥Ä·¥Ñ…™ÃÅ·¥è. ·¥ò Ä·¥è ô·¥ÄÃÅ ·¥Ñ·¥è…¥ ·¥è·¥õ Ä·¥è  ü…™…¥·¥ã.*');
      }

      await conn.sendMessage(chatId, {
        document: { url: filePath },
        fileName,
        mimetype: ext === 'mp3' ? 'audio/mpeg' 
                : ext === 'mp4' ? 'video/mp4' 
                : ext === 'zip' ? 'application/zip' 
                : 'application/octet-stream',
      }, { quoted: m });

      fs.unlinkSync(filePath);
    });
  }
};
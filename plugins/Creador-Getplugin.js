import fs from 'fs';
import path from 'path';

export default {
  command: ['getplugin', 'buscarplugin'],
  help: ['*‚íº·¥á·¥õ·¥ò ü·¥ú…¢…™…¥ <…¥·¥è·¥ç ô Ä·¥á.·¥äs>*'],
  tags: ['*‚ÑÇ‚Ñùùîºùî∏ùîªùïÜ‚Ñù*'],

  run: async (m, { conn, args, isOwner, prefix, command }) => {
    if (!isOwner) return m.reply('*[ ‚ö†Ô∏è ] ·¥ás·¥õ·¥á ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥è s·¥è ü·¥è  ü·¥è ·¥ò·¥ú·¥á·¥Ö·¥á ·¥ús·¥Ä Ä ·¥á ü ·¥ò Ä·¥è·¥ò…™·¥á·¥õ·¥Ä Ä…™·¥è ·¥Ö·¥á ü  ô·¥è·¥õ.*');

    const pluginName = args[0];
    if (!pluginName || !pluginName.endsWith('.js')) {
      return m.reply(`*[ ‚ùå ] ·¥ás·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ·¥Ä ·¥á ü …¥·¥è·¥ç ô Ä·¥á ·¥Ö·¥á ü ·¥ò ü·¥ú…¢…™…¥.* (·¥á·¥ä: *${prefix + command}* prueba.js)`);
    }

    const pluginPath = path.join('./plugins', pluginName);
    if (!fs.existsSync(pluginPath)) {
      return m.reply(`*[ ‚ùå ] ·¥á ü ·¥ò ü·¥ú…¢…™…¥ ${pluginName} …¥·¥è ·¥áx…™s·¥õ·¥á.*`);
    }

    const buffer = fs.readFileSync(pluginPath);
    await conn.sendMessage(m.key.remoteJid, {
      document: buffer,
      fileName: pluginName,
      mimetype: 'application/javascript'
    }, { quoted: m });
  }
};
import { spawn } from 'child_process';

const getFacebookVideoBuffer = (url) => {
  return new Promise((resolve, reject) => {
    const ytdlp = spawn('yt-dlp', [
      '-f', 'best',
      '-o', '-',
      url
    ]);

    const chunks = [];

    ytdlp.stdout.on('data', chunk => chunks.push(chunk));
    ytdlp.stderr.on('data', data => {
      console.log(`üì• yt-dlp: ${data.toString().trim()}`);
    });

    ytdlp.on('close', code => {
      if (code !== 0) {
        return reject(new Error('yt-dlp fall√≥'));
      }
      console.log('[ ‚úÖ ] Descarga finalizada, enviando video...');
      resolve(Buffer.concat(chunks));
    });

    ytdlp.on('error', err => {
      console.log('Error:', err);
      reject(err);
    });
  });
};

export default {
  command: ['fb', 'facebook', 'fbdl'],
  help: ['*‚íª·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã < ü…™…¥·¥ã>*'],
  tags: ['*ùîªùîºùïä‚ÑÇùî∏‚Ñùùîæùî∏ùïä*'],

  run: async (m, { conn, text, chatId, prefix, command }) => {
    if (!text || !text.includes('facebook.com')) {
      return m.tutorial(`*[ ‚ùó ] …™…¥…¢ Ä·¥ás·¥Ä ·¥ú…¥ ·¥á…¥ ü·¥Ä·¥Ñ·¥á ·¥ò·¥úÃÅ ô ü…™·¥Ñ·¥è ·¥Ö·¥á “ì·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã* (·¥á·¥ä: *${prefix + command}* _https://facebook/_)`);
    }

    m.reply('*[ ‚è≥ ] ·¥õ·¥ú ·¥†…™ÃÅ·¥Ö·¥á·¥è ·¥ás·¥õ·¥ÄÃÅ s…™·¥á…¥·¥Ö·¥è  ô·¥ús·¥Ñ·¥Ä·¥Ö·¥è  è ·¥Ö·¥ás·¥Ñ·¥Ä Ä…¢·¥Ä·¥Ö·¥è, ·¥ás·¥ò·¥á Ä·¥Ä ·¥ú…¥ ·¥ç·¥è·¥ç·¥á…¥·¥õ·¥è...*');

    try {
      const videoBuffer = await getFacebookVideoBuffer(text);

      await conn.sendMessage(chatId, {
        video: videoBuffer,
        mimetype: 'video/mp4',
        fileName: `facebook_video_${Date.now()}.mp4`,
        caption: '*[ ‚úÖ ] ·¥Äœô·¥ú…™ÃÅ ·¥õ…™·¥á…¥·¥ás ·¥õ·¥ú ·¥†…™ÃÅ·¥Ö·¥á·¥è.*'
      }, { quoted: m });

    } catch (err) {
      console.error('Error:', err);
      m.reply('* ú·¥ç·¥ç... ·¥Ä ü…¢·¥è s·¥Ä ü…™·¥èÃÅ ·¥ç·¥Ä ü, ·¥Ö·¥á ô·¥á Ä…™ÃÅ·¥Äs  Ä·¥á·¥ò·¥è Ä·¥õ·¥Ä Ä ·¥ás·¥õ·¥á ·¥ò Ä·¥è ô ü·¥á·¥ç·¥Ä. üìç*');
    }
  }
};
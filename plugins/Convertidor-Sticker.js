import { getFileBuffer } from '../lib/myfunc.js';
import { sendImageAsSticker, sendVideoAsSticker } from '../lib/sticker.js';

export default {
  command: ['sticker', 'stik', 's', 'st'],
  help: ['*‚ìà·¥õ…™·¥Ñ·¥ã·¥á Ä<…™·¥ç·¥Ä…¢·¥á…¥/·¥†…™·¥Ö·¥á·¥è 8s>*'],
  tags: ['*‚ÑÇùïÜ‚Ñïùïçùîº‚ÑùùïãùïÄùîªùïÜ‚Ñù*'],

  run: async (m, { conn, chatId, command, prefix }) => {
    try {
      const quoted = m.quoted?.msg || m.message?.extendedTextMessage?.contextInfo?.quotedMessage;
      const img = quoted?.imageMessage || m.message?.imageMessage || quoted?.viewOnceMessage?.message?.imageMessage;
      const vid = quoted?.videoMessage || m.message?.videoMessage || quoted?.viewOnceMessage?.message?.videoMessage;

      const watermarkText = `ZenBot - AxelDev09`;

      if (img) {
        await m.reply('*·¥Ñ Ä·¥á·¥Ä…¥·¥Ö·¥è s·¥õ…™·¥Ñ·¥ã·¥á Ä s·¥è ü·¥è ·¥ò·¥Ä Ä·¥Ä  è·¥è·¥ú·¥ú. ü´°*');
        const { buffer } = await getFileBuffer({ message: { imageMessage: img } }, 'image');
        await sendImageAsSticker(conn, chatId, buffer, m, watermarkText);
      } else if (vid && vid.seconds < 11) {
        await m.reply('*·¥Ñ Ä·¥á·¥Ä…¥·¥Ö·¥è s·¥õ…™·¥Ñ·¥ã·¥á Ä s·¥è ü·¥è ·¥ò·¥Ä Ä·¥Ä  è·¥è·¥ú·¥ú. ü´°*');
        const { buffer } = await getFileBuffer({ message: { videoMessage: vid } }, 'video');
        await sendVideoAsSticker(conn, chatId, buffer, m, watermarkText);
      } else {
        return m.tutorial(`*[ ‚ùó ]  Ä·¥ás·¥ò·¥è…¥·¥Ö·¥á ·¥Ä ·¥ú…¥·¥Ä …™·¥ç·¥Ä…¢·¥á…¥ ·¥è ·¥†…™ÃÅ·¥Ö·¥á·¥è ·¥ò·¥Ä Ä·¥Ä ·¥Ñ·¥è…¥·¥†·¥á Ä·¥õ…™ Ä ü·¥è ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä.* (·¥á·¥ä: *${prefix + command}* _Imagen/video 8s_`);
      }
    } catch (err) {
      console.error('Error:', err);
      return m.reply('* ú·¥ç·¥ç... ·¥Ä ü…¢·¥è s·¥Ä ü…™·¥èÃÅ ·¥ç·¥Ä ü, ·¥Ö·¥á ô·¥á Ä…™ÃÅ·¥Äs  Ä·¥á·¥ò·¥è Ä·¥õ·¥Ä Ä ·¥ás·¥õ·¥á ·¥ò Ä·¥è ô ü·¥á·¥ç·¥Ä. üìç*');
    }
  }
};